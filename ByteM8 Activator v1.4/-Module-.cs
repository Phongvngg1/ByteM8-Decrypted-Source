using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

// Token: 0x02000001 RID: 1
internal class <Module>
{
	// Token: 0x06000001 RID: 1 RVA: 0x00956010 File Offset: 0x00954210
	unsafe static <Module>()
	{
		uint num = 1840U;
		uint[] array = new uint[]
		{
			1108173461U, 4267557377U, 3557138959U, 1876403669U, 2459011941U, 455745046U, 3705953789U, 697494986U, 1329808419U, 3169693312U,
			3318634648U, 856966587U, 3960834060U, 3085836272U, 726720669U, 3923857123U, 3592016708U, 3853422171U, 3208435379U, 2014607769U,
			2363524496U, 3433378004U, 1988889621U, 1446566408U, 1468861387U, 1413053607U, 1427233171U, 2061827718U, 3222329568U, 270096150U,
			1244364569U, 2853697893U, 1105120132U, 691984526U, 718013875U, 2413685393U, 3329721570U, 1906090438U, 2063085292U, 4063148499U,
			4264782672U, 2386243504U, 1421463964U, 95073700U, 230862647U, 3343133932U, 4191040782U, 425570865U, 3471372445U, 4266351856U,
			2355574356U, 1427869221U, 1306921245U, 1726346106U, 2408343478U, 294742813U, 3904141815U, 3675240359U, 2782456148U, 1155604574U,
			3524928735U, 2808376089U, 2929488617U, 3023016762U, 479524785U, 3232710993U, 2089060407U, 4163569076U, 3359880529U, 841273932U,
			1404473047U, 1387022315U, 3805765846U, 1969663476U, 756684726U, 3141015599U, 1095292350U, 2149322975U, 2604059059U, 689829959U,
			2343380987U, 4169247523U, 2224040440U, 2536479160U, 2177356739U, 3189147013U, 1481557589U, 1261242052U, 971652348U, 1651286538U,
			4242251231U, 2682870226U, 1828859261U, 2657173254U, 527257632U, 2648104281U, 2129386191U, 3984017071U, 3749175078U, 2764152621U,
			1597790056U, 3995827293U, 2905258403U, 3152852868U, 1724560444U, 2259437976U, 519543413U, 3889096270U, 1925461777U, 3556252755U,
			2821267322U, 507060954U, 2016960724U, 2786840363U, 2179658590U, 3140326756U, 1561805270U, 3822487988U, 421076444U, 2864449254U,
			2788906169U, 737728575U, 3386365122U, 920119047U, 67839814U, 458591972U, 1231442899U, 3714213929U, 789316725U, 2357518909U,
			1930917606U, 69031097U, 1976932553U, 1602236678U, 2780186797U, 3597464336U, 1139821121U, 3344194171U, 2768364770U, 1854325323U,
			2605560024U, 805006257U, 3813116471U, 3159147453U, 1734958575U, 472475625U, 1905871918U, 3827750186U, 3724804255U, 793267522U,
			4253483158U, 3982814077U, 4291806740U, 1917588868U, 3252543323U, 313110293U, 3793986254U, 2478372565U, 2394076282U, 3893890417U,
			743812693U, 3990078367U, 3476282992U, 1462500857U, 1607400877U, 1611160531U, 3922869460U, 1282078358U, 3403348054U, 2267291348U,
			2509964258U, 3165272506U, 4193397566U, 3277866477U, 1092317216U, 3737117911U, 517273861U, 2908559025U, 2742059903U, 3552205960U,
			3320801298U, 3579106401U, 999919190U, 1238961939U, 3616321250U, 85339333U, 973110508U, 3855412265U, 3071067706U, 2155127390U,
			3868765783U, 3478572724U, 2190601716U, 2606624011U, 3782412293U, 3058778761U, 2591715272U, 1174729429U, 3448778938U, 2361842774U,
			4238116895U, 2701772935U, 3714926646U, 1546569353U, 1369290618U, 1379541824U, 2635583755U, 1819208517U, 3678451689U, 394751686U,
			3015162849U, 1245247122U, 2546026911U, 702933299U, 4716589U, 2454612631U, 2949206987U, 2786399730U, 3828145905U, 2181681847U,
			2249035502U, 820551449U, 2952458177U, 1837929587U, 2011807232U, 1034677512U, 1265059806U, 3307487486U, 4238935328U, 2034519868U,
			3379517814U, 255088006U, 537977138U, 3045884222U, 4138882218U, 1202007784U, 1880004136U, 1670629003U, 3567273677U, 1571269203U,
			959481093U, 3269063167U, 3425793572U, 3737929992U, 3354422016U, 3517135444U, 2369564670U, 1058217260U, 1812561379U, 2210336239U,
			2529010994U, 1416405543U, 2270329846U, 1522428851U, 3833301874U, 415526694U, 33345849U, 653462228U, 2403894253U, 1799622806U,
			388014311U, 3935928538U, 152447253U, 3532197199U, 1228708074U, 3308901339U, 47558257U, 506200902U, 1546544604U, 3815022914U,
			1884378638U, 2316798394U, 3378452932U, 4007401604U, 385767452U, 3845950915U, 3437992979U, 1986486720U, 1871100200U, 3845455446U,
			770460027U, 3800374460U, 4268939965U, 2497956644U, 808749678U, 705232173U, 4195085410U, 431452295U, 3179853350U, 2822118592U,
			531343928U, 1964535781U, 3641221189U, 2973501411U, 3637579214U, 1065852475U, 3472257544U, 959013398U, 2323935892U, 2614354212U,
			2957997992U, 1717915264U, 638329838U, 2149689426U, 3262239591U, 932097343U, 1211963236U, 999645895U, 230666853U, 1525880690U,
			4065037491U, 3828081430U, 4081176975U, 415100201U, 3359403165U, 2166335742U, 3017515480U, 1399416598U, 3071988292U, 1214116175U,
			3401386308U, 280246361U, 2139213258U, 2048100668U, 1964517029U, 1132601862U, 1122047552U, 1104125312U, 627530974U, 467508162U,
			3931015704U, 3699252767U, 624348022U, 1551609230U, 458220049U, 3452779210U, 1071181226U, 1460506422U, 3912752842U, 1430877298U,
			2459509762U, 3267184535U, 340594329U, 2735558992U, 824360101U, 2246718072U, 2315634143U, 2325186555U, 199150520U, 3513529078U,
			942155464U, 346445558U, 3237128419U, 2549195134U, 197528108U, 2993942035U, 1047351215U, 2911339186U, 3743494071U, 3322920146U,
			1386093116U, 18140271U, 230475644U, 3986406956U, 2498031154U, 899452953U, 3723345238U, 87053023U, 4040787828U, 879519249U,
			2209489816U, 534446987U, 401173130U, 200991040U, 1054402359U, 2387542125U, 3275092420U, 2883508750U, 1625129986U, 3890789725U,
			1736184944U, 3810140498U, 2608550889U, 1766954438U, 1975527846U, 4213115507U, 3096327593U, 2985560606U, 1524591974U, 2253324728U,
			485110102U, 2169005263U, 3520771691U, 2473139450U, 3787599409U, 1733817718U, 569082367U, 1157366772U, 1058505630U, 1587227798U,
			3002992771U, 3319019474U, 1289455130U, 3746796117U, 585935916U, 190216069U, 1982545722U, 3688645983U, 2553784477U, 2652505745U,
			3003051306U, 4278310389U, 2458556157U, 3161311501U, 1193942879U, 1503365549U, 3624284394U, 664104702U, 2348725179U, 1941793816U,
			3458170718U, 4085370839U, 1533059781U, 3646688795U, 387973745U, 2105685830U, 3182492853U, 2721184867U, 1736046927U, 2099559594U,
			3600876961U, 4249658544U, 603668172U, 660961734U, 1920211141U, 2899297445U, 720892943U, 309229883U, 246348656U, 1289878914U,
			468818393U, 3242367833U, 4202347881U, 3281806519U, 1416995519U, 3009854527U, 1429980188U, 3851271320U, 1093088447U, 2083271771U,
			3645867306U, 1444739295U, 530262134U, 962214141U, 2909244235U, 2516030618U, 2109641017U, 3651324522U, 3087379844U, 3077355801U,
			1796136980U, 3619356764U, 1766341106U, 859368831U, 441547742U, 3897412904U, 605389460U, 3116874603U, 1797068163U, 2024950535U,
			2309549650U, 4093970071U, 23587114U, 1044744656U, 3483467299U, 1379541080U, 2967010030U, 3628782655U, 423125638U, 1284483385U,
			1480395086U, 812278457U, 1956998070U, 1407487234U, 4082554591U, 991705022U, 3417540072U, 2388629137U, 1859428123U, 464993411U,
			3026902829U, 682140931U, 2153556010U, 158129568U, 1342196943U, 2852143828U, 3568279130U, 564936952U, 636772216U, 1060056605U,
			2232694391U, 116301255U, 2268928279U, 838972658U, 3778656318U, 1543826824U, 449501226U, 2021466337U, 795705911U, 2732075588U,
			390402784U, 2062016433U, 2840223337U, 3483971243U, 1415582601U, 4086253453U, 1597431044U, 3613454953U, 512260564U, 3836901451U,
			1329063955U, 2703939856U, 3912984692U, 3119929162U, 3124747677U, 1085998724U, 4286747198U, 3199964598U, 4258174408U, 3895483714U,
			2682289556U, 2438895756U, 2316511484U, 4001178662U, 427616423U, 2588303759U, 1919992380U, 130326483U, 1747652090U, 3856098595U,
			436412956U, 2741200574U, 1972101674U, 902005228U, 2488208835U, 1239358919U, 3665673166U, 1077259132U, 453111744U, 3719574258U,
			2959505158U, 3577509050U, 1282072500U, 2412217493U, 2083193919U, 623819095U, 2757523640U, 328845345U, 758097362U, 2503821337U,
			308449216U, 2340327597U, 2895244419U, 81634869U, 1201825025U, 3477784714U, 248412036U, 2039821089U, 2844747583U, 191495295U,
			3184947879U, 3021225847U, 1173133721U, 625474840U, 4181487794U, 4046231476U, 88700002U, 2992569928U, 2157022113U, 900159982U,
			2511705136U, 1453425093U, 2783928079U, 737632454U, 2119324622U, 14878236U, 514365400U, 2641374540U, 750028837U, 959552412U,
			1220867786U, 4082206146U, 3261197844U, 90243319U, 1490048393U, 866931276U, 4130392431U, 1816765491U, 2788243659U, 2379118711U,
			1057169067U, 2876062703U, 2715287179U, 1209676671U, 1926422277U, 382753020U, 1958619643U, 3826083302U, 1106018754U, 1057863212U,
			3439912324U, 73024078U, 4241672477U, 3991764598U, 1222036838U, 2462321889U, 185091542U, 875335073U, 927218234U, 4024941545U,
			4228300630U, 468712927U, 1632519823U, 2338982072U, 504990734U, 563877966U, 880807745U, 1001918405U, 332390028U, 451043342U,
			2367057345U, 1390671868U, 3765215492U, 1948022439U, 513047658U, 3232980333U, 651957188U, 2210676437U, 3886184913U, 1360655251U,
			1322710102U, 3981560374U, 2178629580U, 3963126584U, 678614670U, 2530145468U, 2007762446U, 3979751138U, 4075834536U, 3318293063U,
			3610365588U, 3938964209U, 3944486547U, 726726234U, 384208312U, 688182633U, 1803821798U, 1420979106U, 4077654736U, 1264160857U,
			613437754U, 1264171070U, 1784886846U, 3241766568U, 2479961743U, 3976635163U, 3379417473U, 1174609651U, 3835477260U, 2377246703U,
			3787657426U, 3877871450U, 2036871715U, 2793043462U, 4282219010U, 3510828730U, 2570120329U, 328621102U, 3690142689U, 593209943U,
			2888513625U, 1856139027U, 25656446U, 3606105233U, 1390878494U, 2212848326U, 1984686623U, 2553147776U, 3558154324U, 2768647566U,
			1228512166U, 415225827U, 1959338963U, 217506800U, 1733096740U, 3032749088U, 4045942354U, 35765392U, 716728676U, 2208050270U,
			1475464811U, 183019074U, 2993454610U, 3747985972U, 2972811403U, 63167356U, 4004567797U, 897876094U, 1524927253U, 2079470239U,
			3369221383U, 2953324197U, 3001364633U, 2891783876U, 562433391U, 3360389691U, 236705675U, 1993448076U, 2329596838U, 1742251086U,
			3770523123U, 450206649U, 2520105937U, 3186824924U, 3359206869U, 1168637061U, 1339595154U, 1464797420U, 3521581611U, 151989880U,
			3744273391U, 1942646965U, 3870311480U, 3237534809U, 2001121344U, 4073326541U, 3626919312U, 3864880562U, 3186942099U, 220336063U,
			922143977U, 201263643U, 2299190596U, 4213697517U, 1977094916U, 3113988056U, 1743935767U, 3596717115U, 81286328U, 1771396595U,
			3262468041U, 199764644U, 3129568286U, 3115600294U, 3577297062U, 6555467U, 709542951U, 2108371071U, 1006629347U, 769601368U,
			3149853637U, 3154276004U, 3212059692U, 2247488243U, 542720622U, 4238842776U, 2773332154U, 12026681U, 886195096U, 791444282U,
			483773606U, 495545340U, 2795674096U, 2209677692U, 1111285317U, 1100194224U, 3211746962U, 3845500343U, 1157951508U, 917684079U,
			1434653232U, 3867062963U, 3366777848U, 339207027U, 2582794566U, 3513744022U, 3164704233U, 857471373U, 1365577477U, 1390516254U,
			2167532372U, 1707109800U, 3282796711U, 3076482007U, 769338857U, 1660722934U, 899374563U, 54850020U, 542479662U, 3018726684U,
			4041528433U, 1167267988U, 483686210U, 682852196U, 3095889230U, 1138165035U, 1574146971U, 3962880367U, 61005895U, 3576322037U,
			3031167017U, 1157342673U, 1269160359U, 21066283U, 524313605U, 1975737228U, 2677499876U, 3956134714U, 4285399515U, 847874659U,
			731183760U, 3772923258U, 434394069U, 3414775313U, 3680600764U, 419757354U, 1919633558U, 1490100767U, 1890895332U, 3611026502U,
			2553879118U, 347524145U, 1472150406U, 3929105913U, 3895690231U, 2154552066U, 1942471442U, 4241189129U, 858352123U, 4075775541U,
			226899177U, 2287880084U, 818714890U, 491042376U, 4024344101U, 2157620286U, 2097017524U, 853555757U, 4170354638U, 766509276U,
			3114287931U, 2485242703U, 3666586413U, 1701149933U, 2021967281U, 1018729379U, 2256179146U, 835279133U, 3457851048U, 923699672U,
			3352571248U, 1768318401U, 3580270031U, 2533136271U, 1175002477U, 2528328563U, 2558846440U, 3423494250U, 1163849286U, 4000985224U,
			1393059426U, 2128664715U, 4103409189U, 2907878563U, 2143980217U, 589823870U, 3203404119U, 1129988405U, 2990333657U, 3521818311U,
			4115501416U, 3758009556U, 2812690764U, 315183133U, 1948461419U, 2069270779U, 1038307498U, 4049525070U, 3502130303U, 3234609179U,
			13917273U, 806146445U, 3029115475U, 751454849U, 2337778847U, 133370248U, 1599706429U, 3955595927U, 675313317U, 779372874U,
			3514606793U, 123548082U, 853760383U, 2331349156U, 671409008U, 655442957U, 3956227640U, 3441362835U, 2359114046U, 532755221U,
			74115803U, 687508624U, 125095543U, 1540607538U, 341151150U, 3452458966U, 1359655005U, 3848088224U, 2231617709U, 4219797499U,
			1456711071U, 1050841151U, 3302786826U, 2378362849U, 2560013615U, 431924106U, 1056809610U, 1784518507U, 813606597U, 2398618957U,
			1280757436U, 1825362362U, 456866946U, 2527952399U, 1890896293U, 2573111202U, 184847252U, 3518964131U, 4181655030U, 1597580553U,
			1260360757U, 475250116U, 4136172309U, 3095655130U, 1493364570U, 638518916U, 219782619U, 2348022578U, 2625466431U, 978766656U,
			2166540750U, 1000862795U, 2653146539U, 1545974609U, 2692186819U, 2955806956U, 2787987585U, 788501687U, 2473858639U, 129032138U,
			1166169470U, 1988543759U, 2981281066U, 3338086943U, 2872709529U, 4228648924U, 3872680241U, 91992270U, 2551223993U, 815373475U,
			2388794629U, 31656353U, 3231679297U, 3013664596U, 1520977961U, 775617119U, 865408428U, 792011926U, 2992179797U, 846501934U,
			3441512694U, 1155302459U, 2296075063U, 3296225465U, 1038052470U, 374007178U, 456090456U, 127015651U, 4244018478U, 2605210744U,
			4138482932U, 2356514100U, 2964505724U, 3899563119U, 1468705638U, 695746824U, 1028029689U, 485767876U, 3931255759U, 3800358704U,
			143575238U, 1647518199U, 3228428559U, 674212622U, 623604601U, 3301492796U, 3645901508U, 13976569U, 329923644U, 1818795917U,
			2875828087U, 3083956723U, 748022612U, 1404852949U, 759567501U, 977668945U, 1916739772U, 607650915U, 4108302907U, 1790762220U,
			175406267U, 1845100535U, 3652339414U, 607835360U, 2130734052U, 3084470334U, 4271825324U, 2747934120U, 1812542006U, 3752279922U,
			3401310032U, 88125001U, 2374962564U, 1987008332U, 9147185U, 3646537326U, 2085530766U, 2497690497U, 1173724677U, 2898670982U,
			3186913769U, 2740124538U, 2676081725U, 2924580426U, 3485101828U, 2449633331U, 3826843982U, 3110421762U, 33475119U, 1037740238U,
			3318407494U, 1861057306U, 3540244200U, 2266852764U, 776399633U, 1863553181U, 1542364273U, 834695429U, 2521789545U, 3444439614U,
			3740611562U, 1596077296U, 4242185183U, 976620853U, 1303616716U, 3129100518U, 810815344U, 917718381U, 3191528984U, 1682111162U,
			3221534266U, 2655356982U, 2671927112U, 2807391458U, 176225902U, 2990263851U, 2440274489U, 3889506697U, 1247627818U, 3362011539U,
			2820381175U, 935395479U, 3210571481U, 2421218775U, 1623790346U, 1639882414U, 2175903690U, 1155300520U, 2480186055U, 2023458983U,
			2897195960U, 2999975373U, 1340599070U, 644219866U, 258142298U, 2467185500U, 3631546102U, 2560439887U, 806059722U, 3487209030U,
			1749357057U, 1090835948U, 2684775564U, 1834556806U, 1069211648U, 1942324432U, 3198920467U, 2521735529U, 1334178726U, 3893692690U,
			2216989601U, 843800108U, 4115841833U, 1206362283U, 3059797391U, 3310223287U, 4250335560U, 2014762379U, 2807591430U, 2029999351U,
			1662036807U, 2747808387U, 3522225730U, 3860966319U, 3325508292U, 3834956073U, 2622616255U, 1271674651U, 1348390291U, 701254329U,
			2260802650U, 559007220U, 617979823U, 1394676119U, 4248769663U, 1743876123U, 4165235824U, 1338701034U, 2714516323U, 2171398992U,
			3404485915U, 1513574034U, 3257298650U, 3052703514U, 2156152455U, 1908896573U, 4177362364U, 2044358490U, 1970617288U, 341049861U,
			4059085101U, 4258974213U, 3617674224U, 3914243293U, 3184112228U, 3092670327U, 2927906252U, 1157281552U, 1705451190U, 4079491499U,
			2794073264U, 4154018766U, 1410052264U, 2395421004U, 670647693U, 4092233336U, 2787935502U, 3245475895U, 148813096U, 1082796559U,
			2517777009U, 1082604214U, 3319723994U, 768839698U, 3126962034U, 3733621519U, 267879456U, 3341431460U, 942975559U, 1257367092U,
			1103521407U, 3020851686U, 2442539288U, 4095197963U, 1387660691U, 1347082349U, 894031844U, 3470254540U, 3347038596U, 240685343U,
			405828040U, 3804452926U, 1121791405U, 3482836299U, 3624910829U, 3201866430U, 4024154425U, 1557621969U, 4274068366U, 1723808487U,
			2695330665U, 533320269U, 3443262168U, 3430492614U, 1022863564U, 3488982702U, 514222979U, 751695959U, 3042887010U, 1586079791U,
			2338207380U, 1310735311U, 110021161U, 2919970999U, 2051560982U, 842997105U, 954116504U, 2240063094U, 4030786377U, 628264249U,
			3677783440U, 3532378102U, 3533350495U, 2010158019U, 3660224188U, 2529113468U, 2475234644U, 3551960401U, 3693112469U, 1167509499U,
			3740970544U, 561469989U, 3690415476U, 542671955U, 1223777422U, 842484247U, 262579059U, 4086473263U, 1646457044U, 3319889329U,
			1516490345U, 2335796922U, 1485604281U, 312369180U, 1823127817U, 268816564U, 1175977287U, 1936369336U, 3586837552U, 3214655343U,
			3767973084U, 1802768056U, 306531989U, 379463302U, 534912863U, 1376207205U, 306380050U, 1837332647U, 4178579813U, 3320883308U,
			1530031425U, 2424194280U, 3219260896U, 1378831919U, 3878225537U, 481741764U, 1494374537U, 162858749U, 3772467413U, 3949266046U,
			2984706528U, 2482235417U, 4265692382U, 4079802374U, 2168133452U, 4067867203U, 3947616171U, 3481015274U, 3047109168U, 1881517496U,
			3938786099U, 3739162475U, 3604435152U, 1236747806U, 1927362668U, 4019851558U, 3615297022U, 2698906560U, 4203789163U, 2873570106U,
			2628443977U, 2355773944U, 1728080780U, 2703002402U, 1731920045U, 3467379792U, 711791500U, 31643U, 3758567803U, 2366342052U,
			2725297685U, 1857622511U, 3237761680U, 3555689141U, 1141802580U, 2870077865U, 463042301U, 3134101474U, 2691378676U, 1124349449U,
			1171017600U, 3539592519U, 27735162U, 1533830528U, 1587684160U, 1264125308U, 4250790208U, 2782137041U, 3387271028U, 1387444360U,
			1926342699U, 2343307755U, 3540898230U, 2603027774U, 1561117687U, 2386322302U, 3425735967U, 2965543820U, 440836365U, 4162961171U,
			968897310U, 3233993359U, 3261127882U, 88967767U, 2781359896U, 1493661879U, 445863934U, 1807307285U, 1179404593U, 743590333U,
			1940885345U, 4177490355U, 607714038U, 1466925951U, 1969301932U, 830687849U, 1168660256U, 631753673U, 3187976149U, 3681991920U,
			3785298855U, 245032291U, 297572933U, 940680134U, 144939916U, 190684497U, 3921449131U, 3451349367U, 733156078U, 4185142880U,
			912608206U, 423826382U, 867323709U, 2368495137U, 3721566599U, 3153352996U, 841306463U, 1781378202U, 3902773402U, 1068540731U,
			2507870714U, 3799160390U, 4115772751U, 382755180U, 2739403193U, 1548603253U, 2910160629U, 3948885207U, 2993653173U, 1677302817U,
			2335310052U, 3134614139U, 1743846593U, 1118168352U, 2537398443U, 3112032036U, 2180694981U, 2444393372U, 1220151011U, 596189351U,
			1283286411U, 3528715646U, 569526153U, 1952499835U, 689085131U, 848789769U, 375408889U, 3163341920U, 2972418564U, 891247432U,
			4231623437U, 2049845905U, 2449624187U, 3366382544U, 653902272U, 100854966U, 1788027592U, 4044208540U, 2237448340U, 3288491670U,
			4058067681U, 4002432161U, 3247126927U, 2204576134U, 1179981605U, 2732708790U, 4081935193U, 671527535U, 357233257U, 988582805U,
			2899100575U, 1768191859U, 3307500108U, 4021951160U, 2177895422U, 4022518155U, 1558149475U, 3150653953U, 4132572792U, 3572146428U,
			2902170912U, 3684575512U, 1639169500U, 2295148975U, 3127985558U, 124318218U, 1591716047U, 3476263288U, 400825594U, 175041799U,
			3390717910U, 366345245U, 1430042808U, 3345472720U, 2876989841U, 1325999049U, 1131253635U, 304815061U, 3104805539U, 3234410877U,
			4174559752U, 3826666540U, 2169673466U, 3016410693U, 3300678194U, 2281873785U, 3501907920U, 1550626327U, 793575430U, 909056710U,
			1769416725U, 1741374753U, 3923887597U, 3704808329U, 1833369683U, 3266140326U, 2938595333U, 276433438U, 1843403824U, 1400512440U,
			1975079199U, 1670244418U, 3963014239U, 2771344602U, 2282623219U, 3376709469U, 2197893507U, 1620580529U, 360382026U, 2885716077U,
			3917500949U, 4260433728U, 288644532U, 4145476441U, 3345072877U, 2797333344U, 1283608787U, 1419642321U, 2429412188U, 1526920500U,
			2071007904U, 3297701935U, 755837367U, 2241542133U, 234618015U, 2230999433U, 1276191804U, 3470055780U, 2286694608U, 3231386613U,
			2624962489U, 2066235418U, 749940258U, 3449687938U, 2846800657U, 1295711387U, 1006431808U, 516798259U, 312793935U, 4287510962U,
			3808085264U, 986792637U, 1205534773U, 147815717U, 3534928559U, 3089689017U, 3727324078U, 578421562U, 1171496489U, 621665779U,
			2912673690U, 3336052962U, 917360401U, 1297820863U, 2259126061U, 1297023072U, 859194537U, 1101579306U, 2393821278U, 3407697788U,
			4148786208U, 3277753481U, 1455085892U, 189825731U, 1731058165U, 1587197520U, 3059143487U, 2350260563U, 2531162719U, 2944097270U,
			2009402605U, 1069027870U, 219003168U, 3648469326U, 156071428U, 2570858732U, 1038347586U, 1783640479U, 2719404002U, 4228123059U,
			2581001419U, 1279029425U, 3719163221U, 3655895905U, 2333656482U, 3066232399U, 2161413517U, 2964465750U, 4199648890U, 500159579U,
			1763436082U, 4269114198U, 3932095153U, 939086213U, 85342835U, 2244046634U, 1764746523U, 2188860463U, 1896650953U, 2153774514U,
			3575713475U, 207057912U, 2853499935U, 4211318440U, 4218413674U, 2759120814U, 1971688392U, 4206397993U, 1419365276U, 2134925222U,
			2782895555U, 1147324645U, 3236362469U, 826410831U, 3778455042U, 3180124681U, 4122999289U, 3983530319U, 3225187598U, 3393645301U,
			234650796U, 858980142U, 2925101433U, 1538884082U, 2962796373U, 2355865745U, 678007959U, 1373955203U, 3450304545U, 2935138151U,
			2423964760U, 987626077U, 2786929865U, 1125894196U, 3471699956U, 2208447976U, 1177946635U, 403388184U, 1211431942U, 4051735714U,
			930291982U, 1495946085U, 2277807078U, 260333854U, 4207082978U, 3628042700U, 155469313U, 1979847799U, 3932317125U, 946706944U,
			3112561926U, 2037247818U, 207572218U, 430861836U, 3617901516U, 3351773363U, 2210026396U, 2435992004U, 3291946045U, 3989096290U,
			1472640728U, 1333193991U, 1043264955U, 1314745414U, 2278507964U, 1469554239U, 2836153843U, 2262535426U, 1547896807U, 1383362815U,
			2864970623U, 2701991847U, 1382653256U, 1024020433U, 3397793689U, 874269968U, 3181753219U, 2402583059U, 3049191583U, 3760382668U,
			2079201078U, 2151852876U, 4208165299U, 2324014469U, 2975935414U, 386749697U, 3952138597U, 1968198651U, 3718054819U, 3621636709U,
			3510378389U, 2174530005U, 195826167U, 89208737U, 2835213501U, 950740712U, 1389932642U, 1477476351U, 2003025542U, 3108450468U,
			3114496232U, 3085078110U, 2646480002U, 519139351U, 3560770347U, 3052026330U, 4010327782U, 2413739111U, 2380442009U, 551760762U,
			4093253623U, 1842207045U, 2568077319U, 85839933U, 1090890046U, 2057116836U, 1821606671U, 2865945646U, 2675151546U, 2228915033U,
			632263820U, 797109083U, 3768544057U, 493096592U, 2879498797U, 400141338U, 3876260829U, 2040016416U, 3514082430U, 2423323186U,
			3843610028U, 1316264018U, 2053611672U, 1793250147U, 1055179865U, 3745084135U, 576772074U, 582967500U, 2872250197U, 1178481320U,
			4057964415U, 2685051123U, 4253748118U, 193878053U, 137257878U, 3191461707U, 2537401484U, 2257855898U, 3803880320U, 1397318434U,
			3383574641U, 2267732298U, 981301809U, 618609605U, 1090198017U, 3765318859U, 2523261044U, 1516531737U, 1324742423U, 2937724286U,
			2041098900U, 398027277U, 3430195987U, 83639973U, 2036928204U, 3244842871U, 82762718U, 3000505582U, 483385178U, 3999448720U,
			3295947997U, 865926935U, 2575377107U, 3192324657U, 3865755050U, 3506405403U, 2014523455U, 3479079362U, 1989617694U, 736852564U,
			3579250387U, 795034332U, 4220438474U, 1429231509U, 1394852695U, 2711371107U, 3079837488U, 3078736469U, 2440653622U, 2484101971U,
			1415039344U, 3903243078U, 355355217U, 755264503U, 1301974847U, 246767355U, 2153891813U, 2092697801U, 3293480659U, 3793749954U,
			1641994932U, 65251996U, 931028442U, 1276035452U, 2095179892U, 4002034377U, 2811224731U, 1666517610U, 2468694449U, 2122758513U,
			2919964159U, 4056200349U, 3193967247U, 2557326748U, 4221503172U, 1037957969U, 2622635331U, 3748155558U, 3694234011U, 1063121821U,
			3958920944U, 1988510292U, 4059032391U, 47511789U, 3461191631U, 632931875U, 590687103U, 2915086926U, 2361622461U, 1576648814U,
			1976209796U, 2602584604U, 2347633924U, 4192462636U, 2535248616U, 3135541265U, 162434133U, 4240682878U, 1895830105U, 2228580222U,
			3403901349U, 786630085U, 3388903811U, 1143033828U, 152560754U, 1162005098U, 1927072778U, 2069813950U, 1660178159U, 3370446793U,
			3376427514U, 3820574283U, 813815714U, 928200194U, 3547980025U, 537753986U, 1205792293U, 2787391650U, 3388903783U, 1143033828U,
			152560754U, 1162005098U, 1927072778U, 2069813950U, 1660178159U, 3370446793U, 3376427514U, 3820574283U, 813815714U, 928200194U
		};
		uint[] array2 = new uint[16];
		uint num2 = 1644905060U;
		for (int i = 0; i < 16; i++)
		{
			num2 ^= num2 >> 12;
			num2 ^= num2 << 25;
			num2 ^= num2 >> 27;
			array2[i] = num2;
		}
		int num3 = 0;
		int num4 = 0;
		uint[] array3 = new uint[16];
		byte[] array4 = new byte[num * 4U];
		while ((long)num3 < (long)((ulong)num))
		{
			for (int j = 0; j < 16; j++)
			{
				array3[j] = array[num3 + j];
			}
			array3[0] = array3[0] ^ array2[0];
			array3[1] = array3[1] ^ array2[1];
			array3[2] = array3[2] ^ array2[2];
			array3[3] = array3[3] ^ array2[3];
			array3[4] = array3[4] ^ array2[4];
			array3[5] = array3[5] ^ array2[5];
			array3[6] = array3[6] ^ array2[6];
			array3[7] = array3[7] ^ array2[7];
			array3[8] = array3[8] ^ array2[8];
			array3[9] = array3[9] ^ array2[9];
			array3[10] = array3[10] ^ array2[10];
			array3[11] = array3[11] ^ array2[11];
			array3[12] = array3[12] ^ array2[12];
			array3[13] = array3[13] ^ array2[13];
			array3[14] = array3[14] ^ array2[14];
			array3[15] = array3[15] ^ array2[15];
			for (int k = 0; k < 16; k++)
			{
				uint num5 = array3[k];
				array4[num4++] = (byte)num5;
				array4[num4++] = (byte)(num5 >> 8);
				array4[num4++] = (byte)(num5 >> 16);
				array4[num4++] = (byte)(num5 >> 24);
				array2[k] ^= num5;
			}
			num3 += 16;
		}
		<Module>.byte_0 = <Module>.smethod_1(array4);
		Module module = typeof(<Module>).Module;
		byte* ptr = (byte*)(void*)Marshal.GetHINSTANCE(module);
		byte* ptr2 = ptr + 60;
		ptr2 = ptr + *(uint*)ptr2;
		ptr2 += 6;
		ushort num6 = *(ushort*)ptr2;
		ptr2 += 14;
		ushort num7 = *(ushort*)ptr2;
		ptr2 = ptr2 + 4 + num7;
		byte* ptr3 = stackalloc byte[(UIntPtr)11];
		MethodInfo method;
		if (module.FullyQualifiedName[0] != '<')
		{
			byte* ptr4 = ptr + *(uint*)(ptr2 - 16);
			if (*(uint*)(ptr2 - 120) != 0U)
			{
				byte* ptr5 = ptr + *(uint*)(ptr2 - 120);
				byte* ptr6 = ptr + *(uint*)ptr5;
				byte* ptr7 = ptr + *(uint*)(ptr5 + 12);
				byte* ptr8 = ptr + *(uint*)ptr6 + 2;
				<Module>.VirtualProtect(ptr7, 11, 64U, out method);
				*(int*)ptr3 = 1818522734;
				*(int*)(ptr3 + 4) = 1818504812;
				*(short*)(ptr3 + (IntPtr)4 * 2) = 108;
				ptr3[10] = 0;
				for (int l = 0; l < 11; l++)
				{
					ptr7[l] = ptr3[l];
				}
				<Module>.VirtualProtect(ptr8, 11, 64U, out method);
				*(int*)ptr3 = 1866691662;
				*(int*)(ptr3 + 4) = 1852404846;
				*(short*)(ptr3 + (IntPtr)4 * 2) = 25973;
				ptr3[10] = 0;
				for (int m = 0; m < 11; m++)
				{
					ptr8[m] = ptr3[m];
				}
			}
			for (int n = 0; n < (int)num6; n++)
			{
				<Module>.VirtualProtect(ptr2, 8, 64U, out method);
				Marshal.Copy(new byte[8], 0, (IntPtr)((void*)ptr2), 8);
				ptr2 += 40;
			}
			<Module>.VirtualProtect(ptr4, 72, 64U, out method);
			byte* ptr9 = ptr + *(uint*)(ptr4 + 8);
			*(int*)ptr4 = 0;
			*(int*)(ptr4 + 4) = 0;
			*(int*)(ptr4 + (IntPtr)2 * 4) = 0;
			*(int*)(ptr4 + (IntPtr)3 * 4) = 0;
			<Module>.VirtualProtect(ptr9, 4, 64U, out method);
			*(int*)ptr9 = 0;
			ptr9 += 12;
			ptr9 += *(uint*)ptr9;
			ptr9 = (ptr9 + 7L) & -4L;
			ptr9 += 2;
			ushort num8 = (ushort)(*ptr9);
			ptr9 += 2;
			int num9 = 0;
			IL_494:
			while (num9 < (int)num8)
			{
				<Module>.VirtualProtect(ptr9, 8, 64U, out method);
				ptr9 += 4;
				ptr9 += 4;
				int num10 = 0;
				while (num10 < 8)
				{
					<Module>.VirtualProtect(ptr9, 4, 64U, out method);
					*ptr9 = 0;
					ptr9++;
					if (*ptr9 != 0)
					{
						*ptr9 = 0;
						ptr9++;
						if (*ptr9 != 0)
						{
							*ptr9 = 0;
							ptr9++;
							if (*ptr9 != 0)
							{
								*ptr9 = 0;
								ptr9++;
								num10++;
								continue;
							}
							ptr9++;
						}
						else
						{
							ptr9 += 2;
						}
					}
					else
					{
						ptr9 += 3;
					}
					IL_48E:
					num9++;
					goto IL_494;
				}
				goto IL_48E;
			}
		}
		else
		{
			uint num11 = *(uint*)(ptr2 - 16);
			uint num12 = *(uint*)(ptr2 - 120);
			uint[] array5 = new uint[(int)num6];
			uint[] array6 = new uint[(int)num6];
			uint[] array7 = new uint[(int)num6];
			for (int num13 = 0; num13 < (int)num6; num13++)
			{
				<Module>.VirtualProtect(ptr2, 8, 64U, out method);
				Marshal.Copy(new byte[8], 0, (IntPtr)((void*)ptr2), 8);
				array5[num13] = *(uint*)(ptr2 + 12);
				array6[num13] = *(uint*)(ptr2 + 8);
				array7[num13] = *(uint*)(ptr2 + 20);
				ptr2 += 40;
			}
			if (num12 != 0U)
			{
				for (int num14 = 0; num14 < (int)num6; num14++)
				{
					if (array5[num14] <= num12 && num12 < array5[num14] + array6[num14])
					{
						num12 = num12 - array5[num14] + array7[num14];
						IL_568:
						byte* ptr10 = ptr + num12;
						uint num15 = *(uint*)ptr10;
						for (int num16 = 0; num16 < (int)num6; num16++)
						{
							if (array5[num16] <= num15 && num15 < array5[num16] + array6[num16])
							{
								num15 = num15 - array5[num16] + array7[num16];
								break;
							}
						}
						byte* ptr11 = ptr + num15;
						uint num17 = *(uint*)(ptr10 + 12);
						for (int num18 = 0; num18 < (int)num6; num18++)
						{
							if (array5[num18] <= num17 && num17 < array5[num18] + array6[num18])
							{
								num17 = num17 - array5[num18] + array7[num18];
								IL_5F9:
								uint num19 = *(uint*)ptr11 + 2U;
								for (int num20 = 0; num20 < (int)num6; num20++)
								{
									if (array5[num20] <= num19 && num19 < array5[num20] + array6[num20])
									{
										num19 = num19 - array5[num20] + array7[num20];
										IL_63B:
										<Module>.VirtualProtect(ptr + num17, 11, 64U, out method);
										*(int*)ptr3 = 1818522734;
										*(int*)(ptr3 + 4) = 1818504812;
										*(short*)(ptr3 + (IntPtr)4 * 2) = 108;
										ptr3[10] = 0;
										for (int num21 = 0; num21 < 11; num21++)
										{
											(ptr + num17)[num21] = ptr3[num21];
										}
										<Module>.VirtualProtect(ptr + num19, 11, 64U, out method);
										*(int*)ptr3 = 1866691662;
										*(int*)(ptr3 + 4) = 1852404846;
										*(short*)(ptr3 + (IntPtr)4 * 2) = 25973;
										ptr3[10] = 0;
										for (int num22 = 0; num22 < 11; num22++)
										{
											(ptr + num19)[num22] = ptr3[num22];
										}
										goto IL_6E6;
									}
								}
								goto IL_63B;
							}
						}
						goto IL_5F9;
					}
				}
				goto IL_568;
			}
			IL_6E6:
			for (int num23 = 0; num23 < (int)num6; num23++)
			{
				if (array5[num23] <= num11 && num11 < array5[num23] + array6[num23])
				{
					num11 = num11 - array5[num23] + array7[num23];
					break;
				}
			}
			byte* ptr12 = ptr + num11;
			<Module>.VirtualProtect(ptr12, 72, 64U, out method);
			uint num24 = *(uint*)(ptr12 + 8);
			for (int num25 = 0; num25 < (int)num6; num25++)
			{
				if (array5[num25] <= num24 && num24 < array5[num25] + array6[num25])
				{
					num24 = num24 - array5[num25] + array7[num25];
					break;
				}
			}
			*(int*)ptr12 = 0;
			*(int*)(ptr12 + 4) = 0;
			*(int*)(ptr12 + (IntPtr)2 * 4) = 0;
			*(int*)(ptr12 + (IntPtr)3 * 4) = 0;
			byte* ptr13 = ptr + num24;
			<Module>.VirtualProtect(ptr13, 4, 64U, out method);
			*(int*)ptr13 = 0;
			ptr13 += 12;
			ptr13 += *(uint*)ptr13;
			ptr13 = (ptr13 + 7L) & -4L;
			ptr13 += 2;
			ushort num26 = (ushort)(*ptr13);
			ptr13 += 2;
			for (int num27 = 0; num27 < (int)num26; num27++)
			{
				<Module>.VirtualProtect(ptr13, 8, 64U, out method);
				ptr13 += 4;
				ptr13 += 4;
				for (int num28 = 0; num28 < 8; num28++)
				{
					<Module>.VirtualProtect(ptr13, 4, 64U, out method);
					*ptr13 = 0;
					ptr13++;
					if (*ptr13 == 0)
					{
						ptr13 += 3;
						break;
					}
					*ptr13 = 0;
					ptr13++;
					if (*ptr13 == 0)
					{
						ptr13 += 2;
						break;
					}
					*ptr13 = 0;
					ptr13++;
					if (*ptr13 == 0)
					{
						ptr13++;
						break;
					}
					*ptr13 = 0;
					ptr13++;
				}
			}
		}
		method = typeof(Environment).GetMethod("GetEnvironmentVariable", new Type[] { typeof(string) });
		if (method != null && "1".Equals(method.Invoke(null, new object[] { "COR_ENABLE_PROFILING" })))
		{
			Environment.FailFast(null);
		}
		new Thread(new ParameterizedThreadStart(<Module>.smethod_0))
		{
			IsBackground = true
		}.Start(null);
	}

	// Token: 0x06000002 RID: 2 RVA: 0x00956910 File Offset: 0x00954B10
	private static void smethod_0(object thread)
	{
		Thread thread2 = thread as Thread;
		if (thread2 == null)
		{
			thread2 = new Thread(new ParameterizedThreadStart(<Module>.smethod_0));
			thread2.IsBackground = true;
			thread2.Start(Thread.CurrentThread);
			Thread.Sleep(500);
		}
		for (;;)
		{
			if (Debugger.IsAttached || Debugger.IsLogging())
			{
				Environment.FailFast(null);
			}
			if (!thread2.IsAlive)
			{
				Environment.FailFast(null);
			}
			Thread.Sleep(1000);
		}
	}

	// Token: 0x06000003 RID: 3
	[DllImport("kernel32.dll")]
	internal unsafe static extern bool VirtualProtect(byte* lpAddress, int dwSize, uint flNewProtect, out uint lpflOldProtect);

	// Token: 0x06000004 RID: 4 RVA: 0x00956988 File Offset: 0x00954B88
	internal static byte[] smethod_1(byte[] data)
	{
		MemoryStream memoryStream = new MemoryStream(data);
		<Module>.Class1 @class = new <Module>.Class1();
		byte[] array = new byte[5];
		for (int i = 0; i < 5; i += memoryStream.Read(array, i, 5 - i))
		{
		}
		@class.method_5(array);
		for (int i = 0; i < 4; i += memoryStream.Read(array, i, 4 - i))
		{
		}
		if (!BitConverter.IsLittleEndian)
		{
			Array.Reverse(array, 0, 4);
		}
		int num = BitConverter.ToInt32(array, 0);
		byte[] array2 = new byte[num];
		MemoryStream memoryStream2 = new MemoryStream(array2, true);
		long num2 = memoryStream.Length - 5L - 4L;
		@class.method_4(memoryStream, memoryStream2, num2, (long)num);
		return array2;
	}

	// Token: 0x06000005 RID: 5 RVA: 0x00956A30 File Offset: 0x00954C30
	internal static T smethod_2<T>(int id)
	{
		id = (id * -720012595) ^ -323650750;
		int num = (int)((uint)id >> 30);
		id = (id & 1073741823) << 2;
		T t;
		if (num != 3)
		{
			if (num != 2)
			{
				if (num == 0)
				{
					int num2 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
					int num3 = (int)<Module>.byte_0[id + 4] | ((int)<Module>.byte_0[id + 5] << 8) | ((int)<Module>.byte_0[id + 6] << 16) | ((int)<Module>.byte_0[id + 7] << 24);
					Array array = Array.CreateInstance(typeof(T).GetElementType(), num3);
					Buffer.BlockCopy(<Module>.byte_0, id + 8, array, 0, num2 - 4);
					t = (T)((object)array);
				}
				else
				{
					t = default(T);
				}
			}
			else
			{
				T[] array2 = new T[1];
				Buffer.BlockCopy(<Module>.byte_0, id, array2, 0, sizeof(T));
				t = array2[0];
			}
		}
		else
		{
			int num4 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
			t = (T)((object)string.Intern(Encoding.UTF8.GetString(<Module>.byte_0, id + 4, num4)));
		}
		return t;
	}

	// Token: 0x06000006 RID: 6 RVA: 0x00956B84 File Offset: 0x00954D84
	internal static T smethod_3<T>(int id)
	{
		id = (id * 1028590507) ^ -1780297376;
		int num = (int)((uint)id >> 30);
		id = (id & 1073741823) << 2;
		T t;
		if (num != 1)
		{
			if (num != 3)
			{
				if (num != 2)
				{
					t = default(T);
				}
				else
				{
					int num2 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
					int num3 = (int)<Module>.byte_0[id + 4] | ((int)<Module>.byte_0[id + 5] << 8) | ((int)<Module>.byte_0[id + 6] << 16) | ((int)<Module>.byte_0[id + 7] << 24);
					Array array = Array.CreateInstance(typeof(T).GetElementType(), num3);
					Buffer.BlockCopy(<Module>.byte_0, id + 8, array, 0, num2 - 4);
					t = (T)((object)array);
				}
			}
			else
			{
				T[] array2 = new T[1];
				Buffer.BlockCopy(<Module>.byte_0, id, array2, 0, sizeof(T));
				t = array2[0];
			}
		}
		else
		{
			int num4 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
			t = (T)((object)string.Intern(Encoding.UTF8.GetString(<Module>.byte_0, id + 4, num4)));
		}
		return t;
	}

	// Token: 0x06000007 RID: 7 RVA: 0x00956CD8 File Offset: 0x00954ED8
	internal static T smethod_4<T>(int id)
	{
		id = (id * 1022622639) ^ 272179805;
		int num = (int)((uint)id >> 30);
		id = (id & 1073741823) << 2;
		T t;
		if (num != 0)
		{
			if (num == 1)
			{
				T[] array = new T[1];
				Buffer.BlockCopy(<Module>.byte_0, id, array, 0, sizeof(T));
				t = array[0];
			}
			else if (num != 3)
			{
				t = default(T);
			}
			else
			{
				int num2 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
				int num3 = (int)<Module>.byte_0[id + 4] | ((int)<Module>.byte_0[id + 5] << 8) | ((int)<Module>.byte_0[id + 6] << 16) | ((int)<Module>.byte_0[id + 7] << 24);
				Array array2 = Array.CreateInstance(typeof(T).GetElementType(), num3);
				Buffer.BlockCopy(<Module>.byte_0, id + 8, array2, 0, num2 - 4);
				t = (T)((object)array2);
			}
		}
		else
		{
			int num4 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
			t = (T)((object)string.Intern(Encoding.UTF8.GetString(<Module>.byte_0, id + 4, num4)));
		}
		return t;
	}

	// Token: 0x06000008 RID: 8 RVA: 0x00956E2C File Offset: 0x0095502C
	internal static T smethod_5<T>(int id)
	{
		id = (id * 339079653) ^ 489139333;
		int num = (int)((uint)id >> 30);
		id = (id & 1073741823) << 2;
		T t;
		if (num == 0)
		{
			int num2 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
			t = (T)((object)string.Intern(Encoding.UTF8.GetString(<Module>.byte_0, id + 4, num2)));
		}
		else if (num != 2)
		{
			if (num == 3)
			{
				int num3 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
				int num4 = (int)<Module>.byte_0[id + 4] | ((int)<Module>.byte_0[id + 5] << 8) | ((int)<Module>.byte_0[id + 6] << 16) | ((int)<Module>.byte_0[id + 7] << 24);
				Array array = Array.CreateInstance(typeof(T).GetElementType(), num4);
				Buffer.BlockCopy(<Module>.byte_0, id + 8, array, 0, num3 - 4);
				t = (T)((object)array);
			}
			else
			{
				t = default(T);
			}
		}
		else
		{
			T[] array2 = new T[1];
			Buffer.BlockCopy(<Module>.byte_0, id, array2, 0, sizeof(T));
			t = array2[0];
		}
		return t;
	}

	// Token: 0x06000009 RID: 9 RVA: 0x00956F80 File Offset: 0x00955180
	internal static T smethod_6<T>(int id)
	{
		id = (id * 2018490417) ^ -1876074551;
		int num = (int)((uint)id >> 30);
		id = (id & 1073741823) << 2;
		T t;
		if (num != 3)
		{
			if (num == 0)
			{
				T[] array = new T[1];
				Buffer.BlockCopy(<Module>.byte_0, id, array, 0, sizeof(T));
				t = array[0];
			}
			else if (num == 1)
			{
				int num2 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
				int num3 = (int)<Module>.byte_0[id + 4] | ((int)<Module>.byte_0[id + 5] << 8) | ((int)<Module>.byte_0[id + 6] << 16) | ((int)<Module>.byte_0[id + 7] << 24);
				Array array2 = Array.CreateInstance(typeof(T).GetElementType(), num3);
				Buffer.BlockCopy(<Module>.byte_0, id + 8, array2, 0, num2 - 4);
				t = (T)((object)array2);
			}
			else
			{
				t = default(T);
			}
		}
		else
		{
			int num4 = (int)<Module>.byte_0[id] | ((int)<Module>.byte_0[id + 1] << 8) | ((int)<Module>.byte_0[id + 2] << 16) | ((int)<Module>.byte_0[id + 3] << 24);
			t = (T)((object)string.Intern(Encoding.UTF8.GetString(<Module>.byte_0, id + 4, num4)));
		}
		return t;
	}

	// Token: 0x0600000A RID: 10 RVA: 0x009570D4 File Offset: 0x009552D4
	internal static Assembly smethod_7(object sender, ResolveEventArgs args)
	{
		if (<Module>.assembly_0.FullName == args.Name)
		{
			return <Module>.assembly_0;
		}
		return null;
	}

	// Token: 0x0600000B RID: 11
	[DllImport("kernel32.dll", EntryPoint = "VirtualProtect")]
	internal static extern bool VirtualProtect_1(IntPtr lpAddress, uint dwSize, uint flNewProtect, out uint lpflOldProtect);

	// Token: 0x0600000C RID: 12 RVA: 0x00957100 File Offset: 0x00955300
	internal unsafe static void smethod_8()
	{
		Module module = typeof(<Module>).Module;
		string fullyQualifiedName = module.FullyQualifiedName;
		bool flag = fullyQualifiedName.Length > 0 && fullyQualifiedName[0] == '<';
		byte* ptr = (byte*)(void*)Marshal.GetHINSTANCE(module);
		byte* ptr2 = ptr + *(uint*)(ptr + 60);
		ushort num = *(ushort*)(ptr2 + 6);
		ushort num2 = *(ushort*)(ptr2 + 20);
		uint* ptr3 = null;
		uint num3 = 0U;
		uint* ptr4 = (uint*)(ptr2 + 24 + num2);
		uint num4 = 3450733146U;
		uint num5 = 2675225808U;
		uint num6 = 2526221401U;
		uint num7 = 2706974283U;
		for (int i = 0; i < (int)num; i++)
		{
			uint num8 = *(ptr4++) * *(ptr4++);
			if (num8 == 1076015168U)
			{
				ptr3 = (uint*)(ptr + (UIntPtr)(flag ? ptr4[3] : ptr4[1]) / 4);
				num3 = (flag ? ptr4[2] : (*ptr4)) >> 2;
			}
			else if (num8 != 0U)
			{
				uint* ptr5 = (uint*)(ptr + (UIntPtr)(flag ? ptr4[3] : ptr4[1]) / 4);
				uint num9 = ptr4[2] >> 2;
				for (uint num10 = 0U; num10 < num9; num10 += 1U)
				{
					uint num11 = (num4 ^ *(ptr5++)) + num5 + num6 * num7;
					num4 = num5;
					num5 = num7;
					num7 = num11;
				}
			}
			ptr4 += 8;
		}
		uint[] array = new uint[16];
		uint[] array2 = new uint[16];
		for (int j = 0; j < 16; j++)
		{
			array[j] = num7;
			array2[j] = num5;
			num4 = (num5 >> 5) | (num5 << 27);
			num5 = (num6 >> 3) | (num6 << 29);
			num6 = (num7 >> 7) | (num7 << 25);
			num7 = (num4 >> 11) | (num4 << 21);
		}
		array[0] = array[0] ^ array2[0];
		array[1] = array[1] * array2[1];
		array[2] = array[2] + array2[2];
		array[3] = array[3] ^ array2[3];
		array[4] = array[4] * array2[4];
		array[5] = array[5] + array2[5];
		array[6] = array[6] ^ array2[6];
		array[7] = array[7] * array2[7];
		array[8] = array[8] + array2[8];
		array[9] = array[9] ^ array2[9];
		array[10] = array[10] * array2[10];
		array[11] = array[11] + array2[11];
		array[12] = array[12] ^ array2[12];
		array[13] = array[13] * array2[13];
		array[14] = array[14] + array2[14];
		array[15] = array[15] ^ array2[15];
		uint num12 = 64U;
		<Module>.VirtualProtect_1((IntPtr)((void*)ptr3), num3 << 2, 64U, out num12);
		if (num12 == 64U)
		{
			return;
		}
		uint num13 = 0U;
		for (uint num14 = 0U; num14 < num3; num14 += 1U)
		{
			*ptr3 ^= array[(int)(num13 & 15U)];
			array[(int)(num13 & 15U)] = (array[(int)(num13 & 15U)] ^ *(ptr3++)) + 1035675673U;
			num13 += 1U;
		}
	}

	// Token: 0x04000001 RID: 1
	internal static byte[] byte_0;

	// Token: 0x04000002 RID: 2 RVA: 0x00002050 File Offset: 0x00000250
	// Note: this field is marked with 'hasfieldrva'.
	internal static <Module>.Struct4 struct4_0;

	// Token: 0x04000003 RID: 3
	internal static Assembly assembly_0;

	// Token: 0x04000004 RID: 4 RVA: 0x00003D10 File Offset: 0x00001F10
	// Note: this field is marked with 'hasfieldrva'.
	internal static <Module>.Struct5 struct5_0;

	// Token: 0x02000002 RID: 2
	internal struct Struct0
	{
		// Token: 0x0600000D RID: 13 RVA: 0x009573F8 File Offset: 0x009555F8
		internal void method_0()
		{
			this.uint_0 = 1024U;
		}

		// Token: 0x0600000E RID: 14 RVA: 0x00957410 File Offset: 0x00955610
		internal uint method_1(<Module>.Class0 rangeDecoder)
		{
			uint num = (rangeDecoder.uint_1 >> 11) * this.uint_0;
			if (rangeDecoder.uint_0 < num)
			{
				rangeDecoder.uint_1 = num;
				this.uint_0 += 2048U - this.uint_0 >> 5;
				if (rangeDecoder.uint_1 < 16777216U)
				{
					rangeDecoder.uint_0 = (rangeDecoder.uint_0 << 8) | (uint)((byte)rangeDecoder.stream_0.ReadByte());
					rangeDecoder.uint_1 <<= 8;
				}
				return 0U;
			}
			rangeDecoder.uint_1 -= num;
			rangeDecoder.uint_0 -= num;
			this.uint_0 -= this.uint_0 >> 5;
			if (rangeDecoder.uint_1 < 16777216U)
			{
				rangeDecoder.uint_0 = (rangeDecoder.uint_0 << 8) | (uint)((byte)rangeDecoder.stream_0.ReadByte());
				rangeDecoder.uint_1 <<= 8;
			}
			return 1U;
		}

		// Token: 0x04000005 RID: 5
		internal uint uint_0;
	}

	// Token: 0x02000003 RID: 3
	internal struct Struct1
	{
		// Token: 0x0600000F RID: 15 RVA: 0x009574FC File Offset: 0x009556FC
		internal Struct1(int numBitLevels)
		{
			this.int_0 = numBitLevels;
			this.struct0_0 = new <Module>.Struct0[1 << numBitLevels];
		}

		// Token: 0x06000010 RID: 16 RVA: 0x00957524 File Offset: 0x00955724
		internal void method_0()
		{
			uint num = 1U;
			while ((ulong)num < (ulong)(1L << (this.int_0 & 31)))
			{
				this.struct0_0[(int)num].method_0();
				num += 1U;
			}
		}

		// Token: 0x06000011 RID: 17 RVA: 0x0095755C File Offset: 0x0095575C
		internal uint method_1(<Module>.Class0 rangeDecoder)
		{
			uint num = 1U;
			for (int i = this.int_0; i > 0; i--)
			{
				num = (num << 1) + this.struct0_0[(int)num].method_1(rangeDecoder);
			}
			return num - (1U << this.int_0);
		}

		// Token: 0x06000012 RID: 18 RVA: 0x009575A0 File Offset: 0x009557A0
		internal uint method_2(<Module>.Class0 rangeDecoder)
		{
			uint num = 1U;
			uint num2 = 0U;
			for (int i = 0; i < this.int_0; i++)
			{
				uint num3 = this.struct0_0[(int)num].method_1(rangeDecoder);
				num <<= 1;
				num += num3;
				num2 |= num3 << i;
			}
			return num2;
		}

		// Token: 0x06000013 RID: 19 RVA: 0x009575E8 File Offset: 0x009557E8
		internal static uint smethod_0(<Module>.Struct0[] Models, uint startIndex, <Module>.Class0 rangeDecoder, int NumBitLevels)
		{
			uint num = 1U;
			uint num2 = 0U;
			for (int i = 0; i < NumBitLevels; i++)
			{
				uint num3 = Models[(int)(startIndex + num)].method_1(rangeDecoder);
				num <<= 1;
				num += num3;
				num2 |= num3 << i;
			}
			return num2;
		}

		// Token: 0x04000006 RID: 6
		internal readonly <Module>.Struct0[] struct0_0;

		// Token: 0x04000007 RID: 7
		internal readonly int int_0;
	}

	// Token: 0x02000004 RID: 4
	internal class Class0
	{
		// Token: 0x06000014 RID: 20 RVA: 0x00957628 File Offset: 0x00955828
		internal void method_0(Stream stream)
		{
			this.stream_0 = stream;
			this.uint_0 = 0U;
			this.uint_1 = uint.MaxValue;
			for (int i = 0; i < 5; i++)
			{
				this.uint_0 = (this.uint_0 << 8) | (uint)((byte)this.stream_0.ReadByte());
			}
		}

		// Token: 0x06000015 RID: 21 RVA: 0x00957674 File Offset: 0x00955874
		internal void method_1()
		{
			this.stream_0 = null;
		}

		// Token: 0x06000016 RID: 22 RVA: 0x00957688 File Offset: 0x00955888
		internal void method_2()
		{
			while (this.uint_1 < 16777216U)
			{
				this.uint_0 = (this.uint_0 << 8) | (uint)((byte)this.stream_0.ReadByte());
				this.uint_1 <<= 8;
			}
		}

		// Token: 0x06000017 RID: 23 RVA: 0x009576D0 File Offset: 0x009558D0
		internal uint method_3(int numTotalBits)
		{
			uint num = this.uint_1;
			uint num2 = this.uint_0;
			uint num3 = 0U;
			for (int i = numTotalBits; i > 0; i--)
			{
				num >>= 1;
				uint num4 = num2 - num >> 31;
				num2 -= num & (num4 - 1U);
				num3 = (num3 << 1) | (1U - num4);
				if (num < 16777216U)
				{
					num2 = (num2 << 8) | (uint)((byte)this.stream_0.ReadByte());
					num <<= 8;
				}
			}
			this.uint_1 = num;
			this.uint_0 = num2;
			return num3;
		}

		// Token: 0x06000018 RID: 24 RVA: 0x00957744 File Offset: 0x00955944
		internal Class0()
		{
		}

		// Token: 0x04000008 RID: 8
		internal uint uint_0;

		// Token: 0x04000009 RID: 9
		internal uint uint_1;

		// Token: 0x0400000A RID: 10
		internal Stream stream_0;
	}

	// Token: 0x02000005 RID: 5
	internal class Class1
	{
		// Token: 0x06000019 RID: 25 RVA: 0x00957758 File Offset: 0x00955958
		internal Class1()
		{
			this.uint_0 = uint.MaxValue;
			int num = 0;
			while ((long)num < 4L)
			{
				this.struct1_0[num] = new <Module>.Struct1(6);
				num++;
			}
		}

		// Token: 0x0600001A RID: 26 RVA: 0x0095784C File Offset: 0x00955A4C
		internal void method_0(uint dictionarySize)
		{
			if (this.uint_0 != dictionarySize)
			{
				this.uint_0 = dictionarySize;
				this.uint_1 = Math.Max(this.uint_0, 1U);
				uint num = Math.Max(this.uint_1, 4096U);
				this.class4_0.method_0(num);
			}
		}

		// Token: 0x0600001B RID: 27 RVA: 0x00957898 File Offset: 0x00955A98
		internal void method_1(int lp, int lc)
		{
			this.class3_0.method_0(lp, lc);
		}

		// Token: 0x0600001C RID: 28 RVA: 0x009578B4 File Offset: 0x00955AB4
		internal void method_2(int pb)
		{
			uint num = 1U << pb;
			this.class2_0.method_0(num);
			this.class2_1.method_0(num);
			this.uint_2 = num - 1U;
		}

		// Token: 0x0600001D RID: 29 RVA: 0x009578EC File Offset: 0x00955AEC
		internal void method_3(Stream inStream, Stream outStream)
		{
			this.class0_0.method_0(inStream);
			this.class4_0.method_1(outStream, this.bool_0);
			for (uint num = 0U; num < 12U; num += 1U)
			{
				for (uint num2 = 0U; num2 <= this.uint_2; num2 += 1U)
				{
					uint num3 = (num << 4) + num2;
					this.struct0_0[(int)num3].method_0();
					this.struct0_1[(int)num3].method_0();
				}
				this.struct0_2[(int)num].method_0();
				this.struct0_3[(int)num].method_0();
				this.struct0_4[(int)num].method_0();
				this.struct0_5[(int)num].method_0();
			}
			this.class3_0.method_1();
			for (uint num = 0U; num < 4U; num += 1U)
			{
				this.struct1_0[(int)num].method_0();
			}
			for (uint num = 0U; num < 114U; num += 1U)
			{
				this.struct0_6[(int)num].method_0();
			}
			this.class2_0.method_1();
			this.class2_1.method_1();
			this.struct1_1.method_0();
		}

		// Token: 0x0600001E RID: 30 RVA: 0x00957A10 File Offset: 0x00955C10
		internal void method_4(Stream inStream, Stream outStream, long inSize, long outSize)
		{
			this.method_3(inStream, outStream);
			<Module>.Struct3 @struct = default(<Module>.Struct3);
			@struct.method_0();
			uint num = 0U;
			uint num2 = 0U;
			uint num3 = 0U;
			uint num4 = 0U;
			ulong num5 = 0UL;
			if (0L < outSize)
			{
				this.struct0_0[(int)((int)@struct.uint_0 << 4)].method_1(this.class0_0);
				@struct.method_1();
				byte b = this.class3_0.method_3(this.class0_0, 0U, 0);
				this.class4_0.method_5(b);
				num5 += 1UL;
			}
			while (num5 < (ulong)outSize)
			{
				uint num6 = (uint)num5 & this.uint_2;
				if (this.struct0_0[(int)((@struct.uint_0 << 4) + num6)].method_1(this.class0_0) != 0U)
				{
					uint num7;
					if (this.struct0_2[(int)@struct.uint_0].method_1(this.class0_0) != 1U)
					{
						num4 = num3;
						num3 = num2;
						num2 = num;
						num7 = 2U + this.class2_0.method_2(this.class0_0, num6);
						@struct.method_2();
						uint num8 = this.struct1_0[(int)<Module>.Class1.smethod_0(num7)].method_1(this.class0_0);
						if (num8 < 4U)
						{
							num = num8;
						}
						else
						{
							int num9 = (int)((num8 >> 1) - 1U);
							num = (2U | (num8 & 1U)) << num9;
							if (num8 >= 14U)
							{
								num += this.class0_0.method_3(num9 - 4) << 4;
								num += this.struct1_1.method_2(this.class0_0);
							}
							else
							{
								num += <Module>.Struct1.smethod_0(this.struct0_6, num - num8 - 1U, this.class0_0, num9);
							}
						}
					}
					else
					{
						if (this.struct0_3[(int)@struct.uint_0].method_1(this.class0_0) != 0U)
						{
							uint num10;
							if (this.struct0_4[(int)@struct.uint_0].method_1(this.class0_0) == 0U)
							{
								num10 = num2;
							}
							else
							{
								if (this.struct0_5[(int)@struct.uint_0].method_1(this.class0_0) == 0U)
								{
									num10 = num3;
								}
								else
								{
									num10 = num4;
									num4 = num3;
								}
								num3 = num2;
							}
							num2 = num;
							num = num10;
						}
						else if (this.struct0_1[(int)((@struct.uint_0 << 4) + num6)].method_1(this.class0_0) == 0U)
						{
							@struct.method_4();
							this.class4_0.method_5(this.class4_0.method_6(num));
							num5 += 1UL;
							continue;
						}
						num7 = this.class2_1.method_2(this.class0_0, num6) + 2U;
						@struct.method_3();
					}
					if (((ulong)num >= num5 || num >= this.uint_1) && num == 4294967295U)
					{
						break;
					}
					this.class4_0.method_4(num, num7);
					num5 += (ulong)num7;
				}
				else
				{
					byte b2 = this.class4_0.method_6(0U);
					byte b3;
					if (@struct.method_5())
					{
						b3 = this.class3_0.method_3(this.class0_0, (uint)num5, b2);
					}
					else
					{
						b3 = this.class3_0.method_4(this.class0_0, (uint)num5, b2, this.class4_0.method_6(num));
					}
					this.class4_0.method_5(b3);
					@struct.method_1();
					num5 += 1UL;
				}
			}
			this.class4_0.method_3();
			this.class4_0.method_2();
			this.class0_0.method_1();
		}

		// Token: 0x0600001F RID: 31 RVA: 0x00957D7C File Offset: 0x00955F7C
		internal void method_5(byte[] properties)
		{
			int num = (int)(properties[0] % 9);
			byte b = properties[0] / 9;
			int num2 = (int)(b % 5);
			int num3 = (int)(b / 5);
			uint num4 = 0U;
			for (int i = 0; i < 4; i++)
			{
				num4 += (uint)((uint)properties[1 + i] << i * 8);
			}
			this.method_0(num4);
			this.method_1(num2, num);
			this.method_2(num3);
		}

		// Token: 0x06000020 RID: 32 RVA: 0x00957DD8 File Offset: 0x00955FD8
		internal static uint smethod_0(uint len)
		{
			len -= 2U;
			if (len < 4U)
			{
				return len;
			}
			return 3U;
		}

		// Token: 0x0400000B RID: 11
		internal readonly <Module>.Struct0[] struct0_0 = new <Module>.Struct0[192];

		// Token: 0x0400000C RID: 12
		internal readonly <Module>.Struct0[] struct0_1 = new <Module>.Struct0[192];

		// Token: 0x0400000D RID: 13
		internal readonly <Module>.Struct0[] struct0_2 = new <Module>.Struct0[12];

		// Token: 0x0400000E RID: 14
		internal readonly <Module>.Struct0[] struct0_3 = new <Module>.Struct0[12];

		// Token: 0x0400000F RID: 15
		internal readonly <Module>.Struct0[] struct0_4 = new <Module>.Struct0[12];

		// Token: 0x04000010 RID: 16
		internal readonly <Module>.Struct0[] struct0_5 = new <Module>.Struct0[12];

		// Token: 0x04000011 RID: 17
		internal readonly <Module>.Class1.Class2 class2_0 = new <Module>.Class1.Class2();

		// Token: 0x04000012 RID: 18
		internal readonly <Module>.Class1.Class3 class3_0 = new <Module>.Class1.Class3();

		// Token: 0x04000013 RID: 19
		internal readonly <Module>.Class4 class4_0 = new <Module>.Class4();

		// Token: 0x04000014 RID: 20
		internal readonly <Module>.Struct0[] struct0_6 = new <Module>.Struct0[114];

		// Token: 0x04000015 RID: 21
		internal readonly <Module>.Struct1[] struct1_0 = new <Module>.Struct1[4];

		// Token: 0x04000016 RID: 22
		internal readonly <Module>.Class0 class0_0 = new <Module>.Class0();

		// Token: 0x04000017 RID: 23
		internal readonly <Module>.Class1.Class2 class2_1 = new <Module>.Class1.Class2();

		// Token: 0x04000018 RID: 24
		internal bool bool_0;

		// Token: 0x04000019 RID: 25
		internal uint uint_0;

		// Token: 0x0400001A RID: 26
		internal uint uint_1;

		// Token: 0x0400001B RID: 27
		internal <Module>.Struct1 struct1_1 = new <Module>.Struct1(4);

		// Token: 0x0400001C RID: 28
		internal uint uint_2;

		// Token: 0x02000006 RID: 6
		internal class Class2
		{
			// Token: 0x06000021 RID: 33 RVA: 0x00957DF4 File Offset: 0x00955FF4
			internal void method_0(uint numPosStates)
			{
				for (uint num = this.uint_0; num < numPosStates; num += 1U)
				{
					this.struct1_0[(int)num] = new <Module>.Struct1(3);
					this.struct1_1[(int)num] = new <Module>.Struct1(3);
				}
				this.uint_0 = numPosStates;
			}

			// Token: 0x06000022 RID: 34 RVA: 0x00957E40 File Offset: 0x00956040
			internal void method_1()
			{
				this.struct0_0.method_0();
				for (uint num = 0U; num < this.uint_0; num += 1U)
				{
					this.struct1_0[(int)num].method_0();
					this.struct1_1[(int)num].method_0();
				}
				this.struct0_1.method_0();
				this.struct1_2.method_0();
			}

			// Token: 0x06000023 RID: 35 RVA: 0x00957EA4 File Offset: 0x009560A4
			internal uint method_2(<Module>.Class0 rangeDecoder, uint posState)
			{
				if (this.struct0_0.method_1(rangeDecoder) == 0U)
				{
					return this.struct1_0[(int)posState].method_1(rangeDecoder);
				}
				uint num = 8U;
				if (this.struct0_1.method_1(rangeDecoder) != 0U)
				{
					num += 8U;
					num += this.struct1_2.method_1(rangeDecoder);
				}
				else
				{
					num += this.struct1_1[(int)posState].method_1(rangeDecoder);
				}
				return num;
			}

			// Token: 0x06000024 RID: 36 RVA: 0x00957F10 File Offset: 0x00956110
			internal Class2()
			{
			}

			// Token: 0x0400001D RID: 29
			internal readonly <Module>.Struct1[] struct1_0 = new <Module>.Struct1[16];

			// Token: 0x0400001E RID: 30
			internal readonly <Module>.Struct1[] struct1_1 = new <Module>.Struct1[16];

			// Token: 0x0400001F RID: 31
			internal <Module>.Struct0 struct0_0;

			// Token: 0x04000020 RID: 32
			internal <Module>.Struct0 struct0_1;

			// Token: 0x04000021 RID: 33
			internal <Module>.Struct1 struct1_2 = new <Module>.Struct1(8);

			// Token: 0x04000022 RID: 34
			internal uint uint_0;
		}

		// Token: 0x02000007 RID: 7
		internal class Class3
		{
			// Token: 0x06000025 RID: 37 RVA: 0x00957F4C File Offset: 0x0095614C
			internal void method_0(int numPosBits, int numPrevBits)
			{
				if (this.struct2_0 != null)
				{
					if (this.int_1 == numPrevBits)
					{
						if (this.int_0 == numPosBits)
						{
							return;
						}
					}
				}
				this.int_0 = numPosBits;
				this.uint_0 = (1U << numPosBits) - 1U;
				this.int_1 = numPrevBits;
				uint num = 1U << this.int_1 + this.int_0;
				this.struct2_0 = new <Module>.Class1.Class3.Struct2[num];
				for (uint num2 = 0U; num2 < num; num2 += 1U)
				{
					this.struct2_0[(int)num2].method_0();
				}
			}

			// Token: 0x06000026 RID: 38 RVA: 0x00957FD0 File Offset: 0x009561D0
			internal void method_1()
			{
				uint num = 1U << this.int_1 + this.int_0;
				for (uint num2 = 0U; num2 < num; num2 += 1U)
				{
					this.struct2_0[(int)num2].method_1();
				}
			}

			// Token: 0x06000027 RID: 39 RVA: 0x00958010 File Offset: 0x00956210
			internal uint method_2(uint pos, byte prevByte)
			{
				return ((pos & this.uint_0) << this.int_1) + (uint)(prevByte >> 8 - this.int_1);
			}

			// Token: 0x06000028 RID: 40 RVA: 0x00958040 File Offset: 0x00956240
			internal byte method_3(<Module>.Class0 rangeDecoder, uint pos, byte prevByte)
			{
				return this.struct2_0[(int)this.method_2(pos, prevByte)].method_2(rangeDecoder);
			}

			// Token: 0x06000029 RID: 41 RVA: 0x00958068 File Offset: 0x00956268
			internal byte method_4(<Module>.Class0 rangeDecoder, uint pos, byte prevByte, byte matchByte)
			{
				return this.struct2_0[(int)this.method_2(pos, prevByte)].method_3(rangeDecoder, matchByte);
			}

			// Token: 0x0600002A RID: 42 RVA: 0x00957744 File Offset: 0x00955944
			internal Class3()
			{
			}

			// Token: 0x04000023 RID: 35
			internal <Module>.Class1.Class3.Struct2[] struct2_0;

			// Token: 0x04000024 RID: 36
			internal int int_0;

			// Token: 0x04000025 RID: 37
			internal int int_1;

			// Token: 0x04000026 RID: 38
			internal uint uint_0;

			// Token: 0x02000008 RID: 8
			internal struct Struct2
			{
				// Token: 0x0600002B RID: 43 RVA: 0x00958090 File Offset: 0x00956290
				internal void method_0()
				{
					this.struct0_0 = new <Module>.Struct0[768];
				}

				// Token: 0x0600002C RID: 44 RVA: 0x009580B0 File Offset: 0x009562B0
				internal void method_1()
				{
					for (int i = 0; i < 768; i++)
					{
						this.struct0_0[i].method_0();
					}
				}

				// Token: 0x0600002D RID: 45 RVA: 0x009580E0 File Offset: 0x009562E0
				internal byte method_2(<Module>.Class0 rangeDecoder)
				{
					uint num = 1U;
					do
					{
						num = (num << 1) | this.struct0_0[(int)num].method_1(rangeDecoder);
					}
					while (num < 256U);
					return (byte)num;
				}

				// Token: 0x0600002E RID: 46 RVA: 0x00958114 File Offset: 0x00956314
				internal byte method_3(<Module>.Class0 rangeDecoder, byte matchByte)
				{
					uint num = 1U;
					for (;;)
					{
						uint num2 = (uint)((matchByte >> 7) & 1);
						matchByte = (byte)(matchByte << 1);
						uint num3 = this.struct0_0[(int)((1U + num2 << 8) + num)].method_1(rangeDecoder);
						num = (num << 1) | num3;
						if (num2 != num3)
						{
							break;
						}
						if (num >= 256U)
						{
							goto IL_5C;
						}
					}
					while (num < 256U)
					{
						num = (num << 1) | this.struct0_0[(int)num].method_1(rangeDecoder);
					}
					IL_5C:
					return (byte)num;
				}

				// Token: 0x04000027 RID: 39
				internal <Module>.Struct0[] struct0_0;
			}
		}
	}

	// Token: 0x02000009 RID: 9
	internal class Class4
	{
		// Token: 0x0600002F RID: 47 RVA: 0x00958180 File Offset: 0x00956380
		internal void method_0(uint windowSize)
		{
			if (this.uint_2 != windowSize)
			{
				this.byte_0 = new byte[windowSize];
			}
			this.uint_2 = windowSize;
			this.uint_0 = 0U;
			this.uint_1 = 0U;
		}

		// Token: 0x06000030 RID: 48 RVA: 0x009581B8 File Offset: 0x009563B8
		internal void method_1(Stream stream, bool solid)
		{
			this.method_2();
			this.stream_0 = stream;
			if (!solid)
			{
				this.uint_1 = 0U;
				this.uint_0 = 0U;
			}
		}

		// Token: 0x06000031 RID: 49 RVA: 0x009581E4 File Offset: 0x009563E4
		internal void method_2()
		{
			this.method_3();
			this.stream_0 = null;
			Buffer.BlockCopy(new byte[this.byte_0.Length], 0, this.byte_0, 0, this.byte_0.Length);
		}

		// Token: 0x06000032 RID: 50 RVA: 0x00958220 File Offset: 0x00956420
		internal void method_3()
		{
			uint num = this.uint_0 - this.uint_1;
			if (num != 0U)
			{
				this.stream_0.Write(this.byte_0, (int)this.uint_1, (int)num);
				if (this.uint_0 >= this.uint_2)
				{
					this.uint_0 = 0U;
				}
				this.uint_1 = this.uint_0;
				return;
			}
		}

		// Token: 0x06000033 RID: 51 RVA: 0x00958278 File Offset: 0x00956478
		internal void method_4(uint distance, uint len)
		{
			uint num = this.uint_0 - distance - 1U;
			if (num >= this.uint_2)
			{
				num += this.uint_2;
			}
			while (len > 0U)
			{
				if (num >= this.uint_2)
				{
					num = 0U;
				}
				byte[] array = this.byte_0;
				uint num2 = this.uint_0;
				this.uint_0 = num2 + 1U;
				array[(int)num2] = this.byte_0[(int)num++];
				if (this.uint_0 >= this.uint_2)
				{
					this.method_3();
				}
				len -= 1U;
			}
		}

		// Token: 0x06000034 RID: 52 RVA: 0x009582F0 File Offset: 0x009564F0
		internal void method_5(byte b)
		{
			byte[] array = this.byte_0;
			uint num = this.uint_0;
			this.uint_0 = num + 1U;
			array[(int)num] = b;
			if (this.uint_0 >= this.uint_2)
			{
				this.method_3();
			}
		}

		// Token: 0x06000035 RID: 53 RVA: 0x0095832C File Offset: 0x0095652C
		internal byte method_6(uint distance)
		{
			uint num = this.uint_0 - distance - 1U;
			if (num >= this.uint_2)
			{
				num += this.uint_2;
			}
			return this.byte_0[(int)num];
		}

		// Token: 0x06000036 RID: 54 RVA: 0x00957744 File Offset: 0x00955944
		internal Class4()
		{
		}

		// Token: 0x04000028 RID: 40
		internal byte[] byte_0;

		// Token: 0x04000029 RID: 41
		internal uint uint_0;

		// Token: 0x0400002A RID: 42
		internal Stream stream_0;

		// Token: 0x0400002B RID: 43
		internal uint uint_1;

		// Token: 0x0400002C RID: 44
		internal uint uint_2;
	}

	// Token: 0x0200000A RID: 10
	internal struct Struct3
	{
		// Token: 0x06000037 RID: 55 RVA: 0x00958360 File Offset: 0x00956560
		internal void method_0()
		{
			this.uint_0 = 0U;
		}

		// Token: 0x06000038 RID: 56 RVA: 0x00958374 File Offset: 0x00956574
		internal void method_1()
		{
			if (this.uint_0 < 4U)
			{
				this.uint_0 = 0U;
				return;
			}
			if (this.uint_0 >= 10U)
			{
				this.uint_0 -= 6U;
				return;
			}
			this.uint_0 -= 3U;
		}

		// Token: 0x06000039 RID: 57 RVA: 0x009583BC File Offset: 0x009565BC
		internal void method_2()
		{
			this.uint_0 = ((this.uint_0 < 7U) ? 7U : 10U);
		}

		// Token: 0x0600003A RID: 58 RVA: 0x009583E0 File Offset: 0x009565E0
		internal void method_3()
		{
			this.uint_0 = ((this.uint_0 < 7U) ? 8U : 11U);
		}

		// Token: 0x0600003B RID: 59 RVA: 0x00958404 File Offset: 0x00956604
		internal void method_4()
		{
			this.uint_0 = ((this.uint_0 < 7U) ? 9U : 11U);
		}

		// Token: 0x0600003C RID: 60 RVA: 0x00958428 File Offset: 0x00956628
		internal bool method_5()
		{
			return this.uint_0 < 7U;
		}

		// Token: 0x0400002D RID: 45
		internal uint uint_0;
	}

	// Token: 0x0200000B RID: 11
	[StructLayout(LayoutKind.Explicit, Size = 7360)]
	internal struct Struct4
	{
	}

	// Token: 0x0200000C RID: 12
	[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 9773824)]
	internal struct Struct5
	{
	}
}
